#!/usr/bin/env python
"""
This part of code is taken from:
   https://web.archive.org/web/20160305151936/http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python/
Please respect developer (Sander Marechal) and always keep a reference to URL and also as kudos to him
Changes applied to this code:
    Dedention (Justas Balcas 07/12/2017)
    pylint fixes: with open, split imports, var names, old style class (Justas Balcas 07/12/2017)
"""
import sys
import time
from DTNRMLibs.Daemonizer import Daemon
from SiteFE.LookUpService import lookup as LS
from SiteFE.PolicyService import policyService as polS
from SiteFE.ProvisioningService import provisioningService as prsS
from DTNRMLibs.MainUtilities import getLogger
from DTNRMLibs.MainUtilities import getConfig


CONFIG = getConfig(["/etc/dtnrm-site-fe.conf"])
SWITCH_CONFIG = getConfig(["/etc/dtnrm-site-fe-switches.conf"])
COMPONENT = 'ContinuousLoop'
LOGGER = getLogger("%s/%s/" % (CONFIG.get('general', 'logDir'), COMPONENT), CONFIG.get(COMPONENT, 'logLevel'))


class MyDaemon(Daemon):
    """ My own Deamon override """
    def run(self):
        """ Run main execution """
        policer = polS.PolicyService(config=CONFIG, logger=LOGGER, args=None)
        provisioner = prsS.ProvisioningService(config=CONFIG, switchConfig=SWITCH_CONFIG, logger=LOGGER, args=None)
        looker = LS.LookUpService(config=CONFIG, switchConfig=SWITCH_CONFIG, logger=LOGGER, args=None)
        while True:
            hadException = False
            if hadException:
                LOGGER.info('There was an exception in previous run. Sleep 20s.')
                time.sleep(20)
            else:
                LOGGER.info('There was no exception in previous run. Sleep 10s before next run')
                time.sleep(10)
            for action in [["ProvisionService", provisioner],
                           ["LookUpService", looker]]:
                try:
                    LOGGER.info('Starting %s' % action[0])
                    action[1].startwork()
                except:
                    hadException = True
                    LOGGER.info('There was uncaught exception')
                    excType, excValue = sys.exc_info()[:2]
                    LOGGER.critical("Error details. ErrorType: %s, ErrMsg: %s" % (str(excType.__name__), excValue))

if __name__ == "__main__":
    DAEMON = MyDaemon('/tmp/dtnrm-continuousloop.pid')
    if len(sys.argv) == 2:
        DAEMON.command(sys.argv[1], sys.argv[0])
    else:
        DAEMON.command('', sys.argv[0])
